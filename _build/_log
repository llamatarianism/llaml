### Starting build.
# Target: test.ml.depends, tags: { package(ppx_deriving.show), extension:ml, file:test.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package ppx_deriving.show -modules test.ml > test.ml.depends # cached
# Target: ast.ml.depends, tags: { package(ppx_deriving.show), extension:ml, file:ast.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package ppx_deriving.show -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { package(ppx_deriving.show), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package ppx_deriving.show -o ast.cmo ast.ml # cached
# Target: lexer.mll, tags: { package(ppx_deriving.show), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet }
/home/llamatarianism/.opam/4.03.0/bin/ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(ppx_deriving.show), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package ppx_deriving.show -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { package(ppx_deriving.show), extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { package(ppx_deriving.show), byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet }
menhir --ocamlc 'ocamlfind ocamlc -package ppx_deriving.show' --explain --infer parser.mly
+ menhir --ocamlc 'ocamlfind ocamlc -package ppx_deriving.show' --explain --infer parser.mly
File "parser.mly", line 19, characters 33-36:
Warning: the token DOT is unused.
File "parser.mly", line 19, characters 7-15:
Warning: the token SEMISEMI is unused.
# Target: parser.mli.depends, tags: { package(ppx_deriving.show), extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package ppx_deriving.show -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { package(ppx_deriving.show), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -package ppx_deriving.show -o parser.cmi parser.mli
# Target: lexer.cmo, tags: { package(ppx_deriving.show), byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package ppx_deriving.show -o lexer.cmo lexer.ml
# Target: test.cmo, tags: { package(ppx_deriving.show), byte, compile, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -package ppx_deriving.show -o test.cmo test.ml
# Target: ast.cmx, tags: { package(ppx_deriving.show), compile, extension:cmx, extension:ml, file:ast.cmx, file:ast.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package ppx_deriving.show -o ast.cmx ast.ml # cached
# Target: parser.ml.depends, tags: { package(ppx_deriving.show), extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -package ppx_deriving.show -modules parser.ml > parser.ml.depends
# Target: parser.cmx, tags: { package(ppx_deriving.show), compile, extension:cmx, extension:ml, file:parser.cmx, file:parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package ppx_deriving.show -o parser.cmx parser.ml
# Target: lexer.cmx, tags: { package(ppx_deriving.show), compile, extension:cmx, extension:ml, file:lexer.cmx, file:lexer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package ppx_deriving.show -o lexer.cmx lexer.ml
# Target: test.cmx, tags: { package(ppx_deriving.show), compile, extension:cmx, extension:ml, file:test.cmx, file:test.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -package ppx_deriving.show -o test.cmx test.ml
# Target: test.native, tags: { package(ppx_deriving.show), dont_link_with, extension:native, file:test.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg -package ppx_deriving.show ast.cmx parser.cmx lexer.cmx test.cmx -o test.native
# Compilation successful.
